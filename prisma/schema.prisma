// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id           String       @id @default(uuid())
  name         String
  userId       String
  logoUrl      String? // New field
  twitterUrl   String?
  facebookUrl  String?
  instagramUrl String?
  images       StoreImage[]
  mobileImages MobileImage[]
  banners      Banners[]    @relation("StoreToBanner")
  category     Category[]   @relation("StoreToCategory")
  sizes        Sizes[]      @relation("StoreToSize")
  colors       Colors[]     @relation("StoreToColor")
  products     Products[]   @relation("StoreToProduct")
  orders       Orders[]     @relation("StoreToOrder")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// New model for store images
model StoreImage {
  id             String   @id @default(uuid())
  storeId        String
  store          Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([storeId])
}

model MobileImage {
  id        String   @id @default(uuid())
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  mobileUrl String   // URL specific to mobile images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([storeId])
}

//creating store banners
model Banners {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToBanner", fields: [storeId], references: [id])
  category  Category[]
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  name      String
  bannerId  String
  banner    Banners    @relation(fields: [bannerId], references: [id])
  products  Products[] @relation("CategoryToProduct")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
  @@index([bannerId])
}

model Sizes {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Colors {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToColor", fields: [storeId], references: [id])
  products  Products[]
  name      String
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Products {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String      @db.VarChar(800)
  price       Decimal
  isNew       Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Sizes       @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Colors      @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Orders {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItem OrderItem[]
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  email     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Orders   @relation(fields: [orderId], references: [id])
  productId String
  product   Products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
